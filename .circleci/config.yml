# Ressources: 
# https://circleci.com/docs/language-python/
# https://circleci.com/blog/continuous-integration-for-django-projects/
# https://circleci.com/docs/config-intro/

# https://circleci.com/docs/language-python/ In this quickstart guide, we will deploy to Heroku
# Every CircleCI config.yml starts with the version key. This key is used to issue warnings about
# breaking changes.
version: 2.1

# https://circleci.com/docs/language-python/
# The Python orb contains a set of prepackaged CircleCI configurations you can use to do common
# CircleCI tasks for the Python programming language.
# https://circleci.com/docs/concepts/#orbs
# Orbs are reusable snippets of code that help automate repeated processes, accelerate project
# setup, and make it easy to integrate with third-party tools. 
orbs:
  python: circleci/python@2.1.1  # No orb found for django
  heroku: circleci/heroku@2.0.0

# https://circleci.com/docs/language-python/
# Jobs are the building blocks of your config. Jobs are collections of steps, which run
# commands/scripts as required. 
# https://circleci.com/docs/concepts/#jobs
# Each job must declare an executor that is either docker, machine, windows, or macos. For docker
# you must specify an image to use for the primary container. For macos you must specify an Xcode
# version. For windows you must use the Windows orb.
# A common ask from developers who are getting started with CircleCI is to perform three basic
# tasks: build, test and deploy
# https://circleci.com/docs/config-intro/
# By separating those steps into jobs, you can run each of them in a different environment.
jobs:
  build_and_test:
    docker:
      - image: circleci/python:3.10  # version on my computer + as https://pypi.org/project/asgiref/  asgiref requires Python 3.7 or higher.

    steps:
      # https://circleci.com/blog/continuous-integration-for-django-projects/
      - checkout  # This command fetches your source code over SSH to the configured path (the working directory, by default).
      - restore_cache:  # This command restores a previously saved cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Virtual environment creation and requirements installation

          # https://circleci.com/blog/continuous-integration-for-django-projects/
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

      - save_cache:  # This command generates and saves a cache of a file, multiple files, or folders. In our case, we save a cache of the installed Python packages obtained after running pip install ….
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"

      - run:
          name: Running tests
          #replacement of 'python3 manage.py test' by 'pytest -s --no-migrations'
          command: |
            . venv/bin/activate
            pytest -s --no-migrations --ignore=env

      - run:
          name: Running linter
          command: |
            . venv/bin/activate
            flake8 --max-line-length 119 --exclude=env,venv,./lettings/migrations,./oc_lettings_site/migrations,./profiles/migrations

      - store_artifacts:  # This command stores logs, binaries, etc. so that they are accessible by the app in later runs.
          path: test-reports/
          destination: python_app

      # https://circleci.com/docs/language-python/ ; https://circleci.com/docs/workspaces/
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  # https://circleci.com/docs/building-docker-images/#run-docker-commands-using-the-docker-executor
  build_docker:
    docker:
      #- image: cimg/go:1.17 -> does not work for echo
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          # We enable Docker Layer Caching (DLC) here to speed up image building.
          docker_layer_caching: true

      - run : 
          name: checking environment variables
          #replacement of 'python3 manage.py test' by 'pytest -s --no-migrations'
          command: |
            echo 'Hello World!'
            echo 'CIRCLE_BUILD_NUM'
            echo $CIRCLE_BUILD_NUM

            echo 'DOCKERHUB_USERNAME'
            echo $DOCKERHUB_USERNAME

            echo 'DOCKER_USER'
            echo $DOCKER_USER

            echo 'DOCKER_PASS'
            echo $DOCKER_PASS

      - run:
          name: Build docker image
          command: docker build -t $DJANGO_APP_DOCKER_IMAGE_NAME .
      - run:
          name: Login to DockerHub
          command: docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
      - run:
          name: Tag docker image for DockerHub
          command: docker tag $DJANGO_APP_DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DJANGO_APP_DOCKER_IMAGE_NAME:$CIRCLE_BUILD_NUM
      - run:
          name: push docker image to Dockerhub
          command: docker push $DOCKERHUB_USERNAME/$DJANGO_APP_DOCKER_IMAGE_NAME:$CIRCLE_BUILD_NUM
      

  deploy_on_heroku:
    docker:
      #- image: cimg/go:1.17 -> does not work for echo
      - image: cimg/python:3.10
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14
          # We enable Docker Layer Caching (DLC) here to speed up image building.
          docker_layer_caching: true

      - run:
          name: Login to DockerHub
          command: docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD

      # Heroku authentication Method 1 : works only if authenticated with internet browser
      - run:
          name: Install Heroku CLI
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh
            echo $HEROKU_API_KEY
            echo $HEROKU_APP_NAME

      - run: heroku container:login

      # Heroku authentication Method 2 : does not work
      # source : https://devcenter.heroku.com/articles/container-registry-and-runtime
      # docker login --username=_ --password=$(heroku auth:token) registry.heroku.com
      #- run: docker login --username=$HEROKU_USERNAME --password=$HEROKU_API_KEY registry.heroku.com

      # Heroku authentication Method 3 : 
      #- run: heroku container:login --api-key $HEROKU_API_KEY  # --> Error: Unexpected arguments: --api-key,

      - run:
          # To push an image to Heroku, such as one pulled from Docker Hub, tag it and push it according to this naming template:
          # docker tag <image> registry.heroku.com/<app>/<process-type>
          # docker push registry.heroku.com/<app>/<process-type>
          command: docker tag $DJANGO_APP_DOCKER_IMAGE_NAME registry.heroku.com/$HEROKU_APP_NAME/web
      - run:
          command: docker push registry.heroku.com/$HEROKU_APP_NAME/web
          # After you’ve successfully pushed an image to Container Registry, you can create a new release using:
      - run:
          #command: heroku container:release web
          command: heroku container:release web --app $HEROKU_APP_NAME

      # works with install heroku CLI + heroku container:login
      # iw curious about using #run: docker login --username=$HEROKU_USERNAME --password=$($HEROKU_API_KEY) registry.heroku.com and not installing heroku CLI

# A workflow is a set of rules for defining a collection of jobs and their run order. Workflows
# support complex job orchestration using a set of configuration keys to help you resolve failures
# sooner. Inside the workflow, you define the jobs you want to run. CircleCI will run this workflow
# on every commit.
workflows:
  build_test_deploy:
    jobs:
      - build_and_test
      - build_docker:
          requires:
            - build_and_test
#          filters:
#            branches:
#              only: master

      - deploy_on_heroku:
          requires:
            - build_docker
#          filters:
#            branches:
#              only: master
